(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{104:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),o=(n(0),n(123)),s={id:"route-scanner",title:"Route Scanner",sidebar_label:"Route Scanner",slug:"route-scanner"},c={unversionedId:"route-scanner",id:"route-scanner",isDocsHomePage:!1,title:"Route Scanner",description:"Route scanners are used to scan assemblies, classes and methods and generate routes which can then be registered with a router. Routes are identified by attributes on the methods, and classes that contain routes are identifed with attributes on the class.",source:"@site/docs\\gv-route-scanner.md",slug:"/route-scanner",permalink:"/grapevine/docs/route-scanner",editUrl:"https://github.com/scottoffen/grapevine-docs/edit/master/docs/gv-route-scanner.md",version:"current",sidebar_label:"Route Scanner",sidebar:"someSidebar",previous:{title:"Routes",permalink:"/grapevine/docs/routes"},next:{title:"Router and Routing",permalink:"/grapevine/docs/router"}},i=[{value:"Controlling What To Scan",id:"controlling-what-to-scan",children:[{value:"Exclude Specific Assemblies",id:"exclude-specific-assemblies",children:[]},{value:"Scan A Single Assembly",id:"scan-a-single-assembly",children:[]}]},{value:"Controlling When To Scan",id:"controlling-when-to-scan",children:[]},{value:"Identifying Methods To Scan",id:"identifying-methods-to-scan",children:[]}],l={toc:i};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Route scanners are used to scan assemblies, classes and methods and generate routes which can then be registered with a router. Routes are identified by attributes on the methods, and classes that contain routes are identifed with attributes on the class."),Object(o.b)("div",{className:"admonition admonition-important alert alert--info"},Object(o.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(o.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"The ",Object(o.b)("inlineCode",{parentName:"p"},"RouteScanner")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Router")," for a given ",Object(o.b)("inlineCode",{parentName:"p"},"IRestServer")," must be using the same service collection so that types that have routes to register can be added to the container."))),Object(o.b)("h2",{id:"controlling-what-to-scan"},"Controlling What To Scan"),Object(o.b)("p",null,"You can control what assemblies are scanned by the route scanner in two ways."),Object(o.b)("h3",{id:"exclude-specific-assemblies"},"Exclude Specific Assemblies"),Object(o.b)("p",null,"Add assemblies to be excluded from the scan to the ignored assemblies list prior to scanning."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),'// Scans everything except what\'s on the ignored assembly list.\nrouteScanner.AddIgnoredAssembly("AssemblyName");\nrouteScanner.IgnoreAssemblyContainingType<SomeType>();\n\nList<IRoute> routes = routeScanner.Scan();\n')),Object(o.b)("h3",{id:"scan-a-single-assembly"},"Scan A Single Assembly"),Object(o.b)("p",null,"Scan only a specified assembly."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),"// Scan the current assembly\nAssembly assembly = Assembly.GetAssembly(this.GetType());\nList<IRoute> routes = routeScanner.Scan(assembly);\n\n// Scan the assembly containing a given type\nList<IRoute> routes = routeScanner.ScanAssemblyContainingType<SomeType>();\n")),Object(o.b)("h2",{id:"controlling-when-to-scan"},"Controlling When To Scan"),Object(o.b)("p",null,"TODO"),Object(o.b)("h2",{id:"identifying-methods-to-scan"},"Identifying Methods To Scan"),Object(o.b)("p",null,"TODO"))}u.isMDXComponent=!0},123:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),b=u(n),p=r,m=b["".concat(s,".").concat(p)]||b[p]||d[p]||o;return n?a.a.createElement(m,c(c({ref:t},l),{},{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var l=2;l<o;l++)s[l]=n[l];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);